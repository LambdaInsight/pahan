#!/usr/bin/env python

import os, logging, sys, yaml, argparse
import hashlib
from datetime import datetime, timedelta
import dateutil.parser
import pprint, re

import cm_client
from cm_client.rest import ApiException

def datetime_range(start=None, end=None, step=1):
  span = end - start
  for i in range(0, (span.days + 1), step):
    yield (start + timedelta(days=i)).isoformat()

def chunks(list_, group_size, overlap_size):
  return [list_[i:i+group_size] for i in range(0, len(list_), group_size-overlap_size)]

def create_cm_api_client(cm_host, cm_port, cm_version, cm_user, cm_pass):
  cm_url = cm_host + ':' + cm_port + '/api/' + cm_version
  cm_api_client = cm_client.ApiClient(cm_url)
  cm_client.configuration.username = cm_user
  cm_client.configuration.password = cm_pass
  return cm_api_client

def list_all_impala_queries(impala_queries_resource_api, cluster_name, service_name, from_time, until_time):  
  cluster_name=cluster_name
  service_name=service_name
  if not until_time:
    until_time=datetime.utcnow().isoformat()
  try:
    api_response=impala_queries_resource_api.get_impala_queries(
      cluster_name, 
      service_name, 
      filter='', 
      _from=from_time, 
      limit=1000, 
      offset=0, 
      to=until_time
    )
    statements = [ item.statement for item in api_response.queries ]
    pattern = re.compile(r'[0-9]{4}-[0-9]{2}-[0-9]{2}.*Z')
    hash_input = cluster_name+service_name+from_time+until_time 
    file_name = hashlib.sha256(hash_input.encode()).hexdigest()
    with open(file_name+'.queries.sql', 'w') as textfile:
      #textfile.writelines(statements[1].rstrip())
      textfile.writelines([ item + ';\n\n\n' for item in statements ])
    if api_response.warnings:
      res = (len(statements), re.findall(pattern,api_response.warnings[0])[0])
    else:
      res = (len(statements), 'no warning')
     
  except Exception as e:
    logging.fatal(e, exc_info=True)
    res = 'error'
  return res

def list_all_clusters(cm_api_client):  
  try:
    res = cm_api_client.read_clusters(view='SUMMARY')
  except Exception as e:
    res = 'error'
  return res

def list_all_services(cm_api_client, cluster_name):  
  try:
    res = cm_api_client.read_services(cluster_name, view='SUMMARY')
  except Exception as e:
    logging.fatal(e, exc_info=True)
    res = 'error'
  return res

def read_config(file_path):
  logging.info("Function: %s", sys._getframe().f_code.co_name)
  config = yaml.safe_load(open(file_path))
  return config

def no_op():
  logging.info(pprint.pformat('NO OP'))
  return 'ok'

def run_action(args, cm_api_client):
  logging.info("Args: " + pprint.pformat(args.action))
  if args.action == 'list_all_clusters':
    cluster_resource_api = cm_client.ClustersResourceApi(cm_api_client)
    ret = list_all_clusters(cluster_resource_api)
    if not ret == 'error':
      clusters = [ (item.name, item.full_version) for item in ret.items ]
      logging.info('Clusters: ' + pprint.pformat(clusters))
    else:
      logging.error('Error in listing clusters')
  if args.action == 'list_all_services':
    service_resource_api = cm_client.ServicesResourceApi(cm_api_client)
    ret = list_all_services(service_resource_api, args.cluster)
    if not ret == 'error':
      logging.info('Services: ' + pprint.pformat(ret))
    else:
      logging.error('Error in listing services')
  elif args.action == 'list_all_impala_queries':
    service_name='impala'

    if not args.from_time:
      from_time='2019-01-01T04:23:30.775Z'
    else:
      from_time=args.from_time
    logging.info("From time: " + pprint.pformat(from_time))

    if not args.until_time:
      until_time=datetime.utcnow().isoformat()
    else:
      until_time=args.until_time
    logging.info("Until time: " + pprint.pformat(until_time))

    start=dateutil.parser.parse(from_time)
    end=dateutil.parser.parse(until_time)
    date_partitions = chunks(list(datetime_range(start=start, end=end, step=2)),2,1)
    impala_queries_resource_api = cm_client.ImpalaQueriesResourceApi(cm_api_client)
    for chunk in date_partitions:
      logging.info(pprint.pformat(chunk))
      if len(chunk) == 1:
        chunk.append(datetime.utcnow().isoformat())
      ret = list_all_impala_queries(impala_queries_resource_api, args.cluster, service_name, chunk[0], chunk[1])
      if not ret == 'error':
        logging.info(ret)
      else:
        logging.error('Error in listing queries')
  else:
    logging.info("Action is not implemented")
    no_op()
  return 'ok'

def check_params(args,parser,config):
  logging.info("Args: " + pprint.pformat(args))
  logging.info("Parser: " + pprint.pformat(parser))
  allowed_action = ['add_role', 'list_all_clusters', 'list_all_services', 'list_all_impala_queries', 'no_op']
  if not any(vars(args).values()):
    logging.error("No parameter were passed")
    parser.print_help()
    return False
  elif args.action:
    if not args.action in allowed_action:
      logging.error('Invalid action')
      return False
    else:
      logging.info("Action: " + pprint.pformat(args.action))
      return True
  else:
    logging.error("Unknown param")
    return False

def main():
  try:
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)-8s %(message)s',
                        datefmt='%a, %d %b %Y %H:%M:%S')
    logging.info('Interpreter location: %s', sys.executable)
    config = read_config("config.yml")
    logging.debug(config)

    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--action')
    parser.add_argument('-c', '--cluster')
    parser.add_argument('-ft', '--from_time')
    parser.add_argument('-ut', '--until_time')
    args = parser.parse_args()
    if check_params(args,parser,config):
      cloudera_manager_config = config['cloudera_manager']
      cm_api_client = create_cm_api_client(
        cloudera_manager_config['host'], 
        cloudera_manager_config['port'], 
        cloudera_manager_config['api_version'],
        cloudera_manager_config['username'],
        cloudera_manager_config['password']
      )
      run_action(args, cm_api_client)
    else:
      logging.error("Error")
      sys.exit(2)
  except KeyboardInterrupt:
    logging.info("Ctrl+c was pressed, exiting...")
    sys.exit()

if __name__ == '__main__':
  main()
